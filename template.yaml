AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cloud Resume Challege App - Updates DynamoDB table with a count of the total visitors that have visited an index.html page hosted in an S3

Parameters:
  ACMCertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:952977564466:certificate/57058537-78cd-4d7f-a7ff-0a0fe5d7b2de
    Description: ARN of the ACM certificate to use for the CloudFront distribution.
  HostedZoneId: 
    Type: String
    Default: Z02431631RGVM7IKH1DSE
    Description: Route53 Hosted Zone ID to use for the CloudFront distribution.
  DomainName:
    Type: String
    Default: liamstabeno.com
    Description: Domain name to use for the CloudFront distribution.
  S3BucketName:
    Type: String
    Default: cloud-resume-website
    Description: Name of the S3 bucket to use for the CloudFront distribution - must be lowercase.

Resources:
  VisitorDataLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Lambda function updates data in DynamoDB table while retrieving the total amount of visitors'
      Architectures:
      - arm64
      FunctionName: !Sub "${AWS::StackName}-VisitorDataFunction"
      CodeUri: ./visitor_data
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DynamoDBTable
        - DynamoDBWritePolicy:
            TableName: !Ref DynamoDBTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /
            Method: ANY
            ApiId: !Ref VisitorDataHttpApi
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTable
          
  InsertFirstItemLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Lambda function inserts the first item into DynamoDB table'
      Architectures:
      - arm64
      FunctionName: !Sub "${AWS::StackName}-InsertFirstItemFunction"
      CodeUri: ./insert_first_item
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref DynamoDBTable
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTable

  InjectThenUploadStaticContentLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Lambda function injects then uploads static content to S3'
      Architectures:
      - arm64
      FunctionName: !Sub "${AWS::StackName}-InjectThenUploadStaticContentFunction"
      CodeUri: ./inject_then_upload_static_content
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - S3WritePolicy:
            BucketName: !Ref S3HostingBucket

  VisitorDataHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowHeaders:
        - 'content-type'
        AllowMethods:
        - GET
        - POST
        - OPTIONS
        AllowOrigins:
        - !Sub "https://${DomainName}"
        - !Sub "https://${S3HostingBucket}.s3-website-${AWS::Region}.amazonaws.com"

  
  DynamoDBTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-Table"
      PrimaryKey:
        Name: PageId
        Type: String

  InsertFirstItemCustomResource:
    Type: Custom::InsertFirstItemFunction
    Properties:
      ServiceToken: !GetAtt InsertFirstItemLambda.Arn
      DYNAMODB_TABLE_NAME: !Ref DynamoDBTable

  InjectThenUploadStaticContent:
    Type: Custom::InjectThenUploadStaticContentFunction
    Properties:
      ServiceToken: !GetAtt InjectThenUploadStaticContentLambda.Arn
      BUCKET_NAME: !Ref S3HostingBucket
      API_ENDPOINT: !Sub "https://${VisitorDataHttpApi}.execute-api.${AWS::Region}.amazonaws.com"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases:
          - !Sub "${DomainName}"
        Origins:
          - DomainName: !GetAtt S3HostingBucket.RegionalDomainName
            Id: S3HostingBucket
            S3OriginConfig: {}
        DefaultRootObject: 'index.html'
        ViewerCertificate:
          AcmCertificateArn: "arn:aws:acm:us-east-1:952977564466:certificate/57058537-78cd-4d7f-a7ff-0a0fe5d7b2de"
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        DefaultCacheBehavior:
          TargetOriginId: S3HostingBucket
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          ForwardedValues:
            QueryString: false
        PriceClass: PriceClass_100
        HttpVersion: http2
        IPV6Enabled: true
        

  Route53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Sub "${HostedZoneId}"
      Name:  !Sub "${DomainName}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: "Z2FDTNDATAQYW2"

  S3HostingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${S3BucketName}-${AWS::Region}"
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        ErrorDocument: 'error.html'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  
  S3HostingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3HostingBucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${S3HostingBucket}/*"
            Principal: '*'


Outputs:
  APIEndpoint:
    Value: !Sub "https://${VisitorDataHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
  S3HostingBucketName:
    Value: !Sub "${S3HostingBucket}.s3-website-${AWS::Region}.amazonaws.com"
  BucketWebsiteURL:
    Value: !Sub "https://${S3HostingBucket}.s3-website-${AWS::Region}.amazonaws.com"
  StackName:
    Value: !Sub "${AWS::StackName}"
  DynamoDBTableName:
    Value: !Sub "${DynamoDBTable}"
  DynammoDBTableARN:
    Value: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}"
  WebsiteURL:
    Value: !Sub "https://${DomainName}"
