AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cloud Resume Challege App - Updates DynamoDB table with a count of the total visitors that have visited an index.html page hosted in an S3
Resources:
  VisitorDataLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Lambda function updates data in DynamoDB table while retrieving the total amount of visitors'
      # Architectures:  Add this back when moving into Prod
      # - arm64
      FunctionName: !Sub "${AWS::StackName}-VisitorDataFunction"
      CodeUri: ./visitor_data
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DynamoDBTable
        - DynamoDBWritePolicy:
            TableName: !Ref DynamoDBTable
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /
            Method: ANY
            ApiId: !Ref VisitorDataHttpApi
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTable
          
  InsertFirstItemLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Lambda function inserts the first item into DynamoDB table'
      # Architectures:  Add this back when moving into Prod
      # - arm64
      FunctionName: !Sub "${AWS::StackName}-InsertFirstItemFunction"
      CodeUri: ./insert_first_item
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref DynamoDBTable
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTable

  InjectThenUploadStaticContentLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Lambda function injects then uploads static content to S3'
      # Architectures:  Add this back when moving into Prod
      # - arm64
      FunctionName: !Sub "${AWS::StackName}-InjectThenUploadStaticContentFunction"
      CodeUri: ./inject_then_upload_static_content
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - S3WritePolicy:
            BucketName: !Ref S3HostingBucket

  VisitorDataHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowHeaders:
        - 'content-type'
        AllowMethods:
        - GET
        - POST
        - OPTIONS
        AllowOrigins:
        - '*'

  
  DynamoDBTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-Table"
      PrimaryKey:
        Name: PageId
        Type: String

  S3HostingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-s3-hosting-bucket"
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        ErrorDocument: 'error.html'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  
  S3HostingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3HostingBucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${S3HostingBucket}/*"
            Principal: '*'

  InsertFirstItemCustomResource:
    Type: Custom::InsertFirstItemFunction
    Properties:
      ServiceToken: !GetAtt InsertFirstItemLambda.Arn
      DYNAMODB_TABLE_NAME: !Ref DynamoDBTable

  InjectThenUploadStaticContent:
    Type: Custom::InjectThenUploadStaticContentFunction
    Properties:
      ServiceToken: !GetAtt InjectThenUploadStaticContentLambda.Arn
      BUCKET_NAME: !Ref S3HostingBucket
      API_ENDPOINT: !Sub "https://${VisitorDataHttpApi}.execute-api.${AWS::Region}.amazonaws.com"

Outputs:
  APIEndpoint:
    Value: !Sub "https://${VisitorDataHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
  S3HostingBucket:
    Value: !Ref S3HostingBucket
  BucketWebsiteURL:
    Value: !Sub "http://${S3HostingBucket}.s3-website-${AWS::Region}.amazonaws.com"
